admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1")
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1")
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1") -> pg
pg
pg -> ggplotGrob(pg)
library(ggplot2)
pg -> ggplotGrob(pg)
ggplotGrob(pg)
ggplotGrob(pg) -> pg
pg
for(i in which(grepl("strip-r", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
grid::grid.draw(pg)
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1")
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, sortkey = "anc1") -> pp
pg <- ggplotGrob(pp)
for(i in which(grepl("strip-r", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("panel-1-6", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("strip-b-1", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("axis-b-6", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("axis-t-6", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("x-lab-b", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("x-lab-t", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
pg <- ggplotGrob(pp)
for(i in which(grepl("*", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw(pg)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19)
admix_barplot(admix, 4:19)
admix_barplot(admix, 4:19, grouping = "species")
admix_barplot(admix, 4:19, grouping = "species", names = FALSE)
dev.new()
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
pg <- ggplotGrob(pp)
for(i in which(grepl("*", pg$layout$name))){
pg$grobs[[i]]$layout$clip <- "off"
}
grid::grid.draw
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE) -> tplt
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
admix_barplot(admix, 4:19, grouping = "species", names = FALSE, noclip = TRUE)
roxygenize()
?admix_barplot
usethis::use_tidy_description()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
usethis::use_tidy_description()
admix_barplot(admix)
admix_barplot(admix[3:19])
admix_barplot(admix[,3:19])
admix[,3:19]
admix[,3:19] ->admixa
admix_barplot(admixa)
admix_barplot(admix)
admix[,c(1,4:19)] ->admixa
admix_barplot(admixa)
roxygenize()
roxygenize()
roxygenize()
?admix_barplot
devtools::check()
?out
usethis::use_tidy_description()
usethis::use_tidy_description()
usethis::use_tidy_description()
usethis::use_tidy_description()
usethis::use_tidy_description()
setwd("~/Apps, Websites/xadmix")
getwd()
setwd("..")
getwd()
setwd("~/Apps, Websites/xadmix")
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
d_key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
d_val <- sample(1:200000, 600, replace = FALSE)
d_acc <- paste0(d_key, "_", d_val, "_")
xadmixture <- data.frame(d_acc)
# define number of ancestry columns
# and give different weights to each one
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("anc", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# save dummy data to data file
write_csv(xadmixture, "data-raw/xadmixture.csv")
usethis::use_data(xadmixture, overwrite = TRUE)
# Generate Dummy Dataset
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
d_key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
d_val <- sample(1:200000, 600, replace = FALSE)
d_acc <- paste0(d_key, "_", d_val, "_")
xadmixture <- data.frame(d_acc)
# define number of ancestry columns
# and give different weights to each one
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("anc", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# save dummy data to data file
write.csv(xadmixture, "data-raw/xadmixture.csv")
usethis::use_data(xadmixture, overwrite = TRUE)
usethis::use_tidy_description()
usethis::use_tidy_description()
usethis::use_tidy_description()
# Generate Dummy Dataset
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
d_key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
d_val <- sample(1:200000, 600, replace = FALSE)
d_acc <- paste0(d_key, "_", d_val, "_")
xadmixture <- data.frame(d_acc)
# define number of ancestry columns
# and give different weights to each one
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("K", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# save dummy data to data file
write.csv(xadmixture, "data-raw/xadmixture.csv")
usethis::use_data(xadmixture, overwrite = TRUE)
# Generate Dummy Dataset
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
d_key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
d_val <- sample(1:200000, 600, replace = FALSE)
d_acc <- paste0(d_key, "_", d_val, "_")
xadmixture <- data.frame(d_acc)
# define number of ancestry columns
# and give different weights to each one
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("K", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# save dummy data to data file
write.csv(xadmixture, "data-raw/xadmixture.csv", row.names = FALSE)
usethis::use_data(xadmixture, overwrite = TRUE)
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
val <- sample(1:200000, 600, replace = FALSE)
acc <- paste0(key, "_", val, "_")
xadmixture <- data.frame(acc)
# define number of ancestry columns
# and give different weights to each one
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("K", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# save dummy data to data file
write.csv(xadmixture, "data-raw/xadmixture.csv", row.names = FALSE)
usethis::use_data(xadmixture, overwrite = TRUE)
# Generate Dummy Dataset
library(usethis)
# set seed for reproducible results
set.seed(01640731)
# number of observations is 600
# generate semi-random accession names
key <- rep(
c("AA", "BB", "ABC", "DC", "EA"),
c(100, 130, 200, 10, 160)
)
val <- sample(1:200000, 600, replace = FALSE)
acc <- paste0(key, "_", val, "_")
xadmixture <- data.frame(acc)
# generate vector with six country codes and
# randomly assign country codes to dummy data observations
country_codes <- c("GBR", "FRA", "ESP", "ITA", "DEU", "NLD")
d_country <- rep(
country_codes,
c(100, 130, 160, 50, 100, 60)
)
xadmixture$country <- sample(d_country)
# generate vector with three species and
# randomly assign species to dummy data observations
species <- c("lorem", "ipsum", "dolor")
d_species <- rep(species, 200)
xadmixture$species <- sample(d_species)
# define number of ancestry columns (K),
# give different weights to each one and
# assign them to dummy data
n_anc <- 5
for (n in 1:n_anc) {
anc <- paste0("K", n)
pct <- runif(600, 0, +n / n_anc)
xadmixture[anc] <- pct
}
# create a vector with the sum of all ancestry columns
# excluding first column (which is the accession)
# then normalize ancestry columns so they add up to 1
d_sums <- rowSums(xadmixture[, -1])
for (n in 1:n_anc) {
anc <- paste0("anc", n)
xadmixture[anc] <- xadmixture[anc] / d_sums
}
# save dummy data to data file
write.csv(xadmixture, "data-raw/xadmixture.csv", row.names = FALSE)
usethis::use_data(xadmixture, overwrite = TRUE)
dim(xadmixture)
install_github("SpaceCowboy-71/xadmix")
if (!require("devtools")) {
install.packages("devtools")
library(devtools)
}
install_github("SpaceCowboy-71/xadmix")
library(xadmix)
?xadmix_barplot
??xadmix_barplot
?admix_barplot
data("xadmixture")
?xadmixture
??xadmixture
roxygenize()
library(roxygen2)
roxygenize()
??xadmixture
library(xadmix)
??xadmixture
View(xadmixture)
View(xadmixture)
View(xadmixture)
data("xadmixture")
??xadmixture
?xadmixture
?admix_barplot
data(xadmix::xadmixture)
data(xadmix:xadmixture)
data(xadmixture)
xadmix::xadmixture
install_github("SpaceCowboy-71/xadmix")
library(xadmix)
data("xadmixture")
data(xadmixture)
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("anc1", "anc5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 2:6,
sortkey = "anc5",
palette = "viridis",
grouping = "country")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 2:6,
sortkey = "anc5",
palette = "viridis",
grouping = "country")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 2:6,
sortkey = "K5",
palette = "viridis",
grouping = "country")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 4:9,
sortkey = "K5",
palette = "viridis",
grouping = "country")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 4:8,
sortkey = "K5",
palette = "viridis",
grouping = "country")
library(str_sort)
library(stringr)
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 4:8,
sortkey = "K5",
palette = "viridis",
grouping = "country")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 4:8,
sortkey = "K5",
palette = "viridis",
grouping = "country")
install_github("SpaceCowboy-71/xadmix")
admix_subset(xadmixture,
country = c("GBR", "FRA"),
anc = c("K1", "K5"),
pct = c(0.1, 0.1)) %>%
admix_barplot(K = 4:8,
sortkey = "K5",
palette = "viridis",
grouping = "country")
data("xadmixture")
library(xadmix)
data("xadmixture")
install_github("SpaceCowboy-71/xadmix")
library(xadmix)
data("xadmixture")
